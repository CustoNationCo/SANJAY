[general]
definition = flsun_v400
name = Normal
version = 4

[metadata]
global_quality = True
quality_type = normal
setting_version = 19
type = quality
weight = -2

[values]
acceleration_enabled = True
acceleration_infill = =acceleration_print
acceleration_layer_0 = =acceleration_print
acceleration_print = 8000.0
acceleration_print_layer_0 = =acceleration_print
acceleration_roofing = =acceleration_topbottom
acceleration_skirt_brim = =acceleration_print
acceleration_topbottom = 6000.0
acceleration_travel = =acceleration_print
acceleration_travel_layer_0 = =acceleration_print
acceleration_wall = 5000
acceleration_wall_0 = =acceleration_wall
acceleration_wall_x = =acceleration_wall
adhesion_type = brim
alternate_extra_perimeter = False
bottom_layers = =999999 if infill_sparse_density == 100 else math.ceil(round(bottom_thickness / resolveOrValue('layer_height'), 4))
bottom_skin_expand_distance = =expand_skins_expand_distance
bottom_skin_preshrink = =skin_preshrink
bottom_thickness = =top_bottom_thickness
bridge_enable_more_layers = False
bridge_settings_enabled = True
bridge_wall_material_flow = 70
brim_width = 3
expand_skins_expand_distance = =wall_line_width_0 + (wall_line_count - 1) * wall_line_width_x
gradual_infill_steps = 0
hole_xy_offset = 0
infill_before_walls = False
infill_line_distance = =0 if infill_sparse_density == 0 else (infill_line_width * 100) / infill_sparse_density * (2 if infill_pattern == 'grid' else (3 if infill_pattern == 'triangles' or infill_pattern == 'trihexagon' or infill_pattern == 'cubic' or infill_pattern == 'cubicsubdiv' else (2 if infill_pattern == 'tetrahedral' or infill_pattern == 'quarter_cubic' else (1 if infill_pattern == 'cross' or infill_pattern == 'cross_3d' else (1.6 if infill_pattern == 'lightning' else 1)))))
infill_line_width = =line_width
infill_material_flow = =material_flow
infill_multiplier = 1
infill_overlap = =20 if infill_sparse_density < 95 and infill_pattern != 'concentric' else 0
infill_overlap_mm = =0.5 * (infill_line_width + (wall_line_width_x if wall_line_count > 1 else wall_line_width_0)) * infill_overlap / 100 if infill_sparse_density < 95 and infill_pattern != 'concentric' else 0
infill_pattern = gyroid
infill_randomize_start_location = False
infill_sparse_density = 10.0
infill_sparse_thickness = =resolveOrValue('layer_height')
infill_support_enabled = False
infill_wall_line_count = 0
infill_wipe_dist = =wall_line_width_0 / 4 if wall_line_count == 1 else wall_line_width_x / 4
initial_layer_line_width_factor = 90
ironing_enabled = False
jerk_enabled = True
jerk_infill = 200
jerk_layer_0 = =jerk_print
jerk_print = 10
jerk_print_layer_0 = =jerk_print
jerk_roofing = =jerk_print
jerk_skirt_brim = =jerk_print
jerk_topbottom = =jerk_print
jerk_travel = =jerk_infill
jerk_travel_layer_0 = =jerk_travel
jerk_wall = =jerk_print
jerk_wall_0 = =jerk_wall / 2
jerk_wall_x = =jerk_wall
layer_height = 0.2
layer_height_0 = 0.3
line_width = 0.44
material_bed_temperature = 60.0
material_bed_temperature_layer_0 = 60.0
material_final_print_temperature = 210.0
material_flow = 90.0
material_flow_layer_0 = 100.0
material_initial_print_temperature = 210.0
material_print_temperature = 210.0
material_print_temperature_layer_0 = 210.0
max_skin_angle_for_expansion = 90
min_infill_area = 0
optimize_wall_printing_order = True
prime_tower_flow = =material_flow
retract_at_layer_change = False
retraction_amount = 0.8
retraction_combing = noskin
retraction_combing_max_distance = 10.0
retraction_enable = True
retraction_extra_prime_amount = 0
retraction_extrusion_window = =retraction_amount
retraction_hop = 0.3
retraction_hop_enabled = True
retraction_min_travel = =line_width * 2
retraction_prime_speed = =retraction_speed
retraction_retract_speed = =retraction_speed
retraction_speed = 40.0
roofing_layer_count = 1
roofing_material_flow = =skin_material_flow
skin_angles = [ ]
skin_edge_support_layers = =math.ceil(round(skin_edge_support_thickness / resolveOrValue('infill_sparse_thickness'), 4))
skin_edge_support_thickness = =0 if infill_sparse_density > 0 else 0
skin_material_flow = =material_flow
skin_monotonic = False
skin_no_small_gaps_heuristic = False
skin_outline_count = =0 if top_bottom_pattern == 'concentric' and top_bottom_pattern_0 == 'concentric' and roofing_layer_count <= 0 else 1
skin_overlap = =20 if top_bottom_pattern != 'concentric' else 0
skin_overlap_mm = =0.5 * (skin_line_width + (wall_line_width_x if wall_line_count > 1 else wall_line_width_0)) * skin_overlap / 100 if top_bottom_pattern != 'concentric' else 0
skin_preshrink = =wall_line_width_0 + (wall_line_count - 1) * wall_line_width_x
skirt_brim_line_width = =line_width
skirt_brim_material_flow = =material_flow
skirt_brim_speed = =speed_layer_0
speed_infill = =speed_print * 350 / 400
speed_layer_0 = =speed_print* 50 / 400
speed_print = 400.0
speed_roofing = =speed_wall_0
speed_slowdown_layers = 2
speed_topbottom = =speed_wall_0
speed_travel = =speed_print
speed_travel_layer_0 = =speed_layer_0 * 3
speed_wall = =speed_print*280 / 400
speed_wall_0 = =speed_wall* 120 /280
speed_wall_x = =speed_wall
speed_z_hop = 50.0
support_enable = False
top_bottom_pattern = lines
top_bottom_pattern_0 = =top_bottom_pattern
top_bottom_thickness = 0.6
top_layers = =0 if infill_sparse_density == 100 else math.ceil(round(top_thickness / resolveOrValue('layer_height'), 4))
top_skin_expand_distance = =expand_skins_expand_distance
top_skin_preshrink = =skin_preshrink
top_thickness = 1
travel_retract_before_outer_wall = False
wall_0_inset = =(machine_nozzle_size - wall_line_width_0) / 2 if (wall_line_width_0 < machine_nozzle_size and not outer_inset_first) else 0
wall_0_material_flow = =wall_material_flow
wall_0_wipe_dist = =machine_nozzle_size / 2
wall_line_count = =1 if magic_spiralize else max(1, round((wall_thickness - wall_line_width_0) / wall_line_width_x) + 1) if wall_thickness != 0 else 0
wall_line_width_0 = =line_width-0.02
wall_line_width_x = =line_width-0.01
wall_material_flow = =material_flow
wall_overhang_angle = 35.0
wall_overhang_speed_factor = 60.0
wall_thickness = 0.88
wall_x_material_flow = =wall_material_flow
xy_offset = 0
xy_offset_layer_0 = =xy_offset
z_seam_corner = z_seam_corner_inner
z_seam_type = sharpest_corner
zig_zaggify_infill = True

